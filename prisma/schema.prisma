generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SOCIAL_WORKER
  CLIENT
}

enum SubscriptionStatus {
  NONE
  ACTIVE
  CANCELED
  PAST_DUE
}

enum PaymentProvider {
  MAKSEKESKUS
  TEST
}

enum PaymentStatus {
  INITIATED
  PAID
  CANCELED
  FAILED
  REFUNDED
}

enum RagSourceType {
  FILE
  URL
}

enum RagStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum Audience {
  SOCIAL_WORKER
  CLIENT
  BOTH
}

enum RunStatus {
  RUNNING
  COMPLETED
  ERROR
  DELETED
}

/**
 * ---------- Models ----------
 */

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?
  role          Role      @default(CLIENT)
  isAdmin       Boolean   @default(false)

  // NextAuth
  accounts Account[]
  sessions Session[]

  // Äri
  profile       Profile?
  subscriptions Subscription[]
  payments      Payment[]
  ragDocuments  RagDocument[]

  // Chat / runs
  conversationRuns ConversationRun[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String  @id @default(cuid())
  userId    String  @unique
  firstName String?
  lastName  String?
  phone     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id          String             @id @default(cuid())
  userId      String
  status      SubscriptionStatus @default(NONE)
  plan        String             @default("kuutellimus")
  validUntil  DateTime?
  nextBilling DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  canceledAt  DateTime?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@index([userId])
  @@index([status])
  @@index([validUntil])
}

model Payment {
  id                String          @id @default(cuid())
  subscriptionId    String
  userId            String
  provider          PaymentProvider @default(MAKSEKESKUS)
  providerPaymentId String
  amount            Decimal         @db.Decimal(10, 2)
  currency          String          @default("EUR")
  status            PaymentStatus
  paidAt            DateTime?
  raw               Json?
  createdAt         DateTime        @default(now())

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerPaymentId])
  @@index([subscriptionId])
  @@index([userId])
}

model RagDocument {
  id       String  @id @default(cuid())
  adminId  String?
  admin    User?   @relation(fields: [adminId], references: [id], onDelete: SetNull)

  title        String?
  description  String?
  type         RagSourceType
  status       RagStatus     @default(PENDING)
  audience     Audience      @default(BOTH)

  // Päritolu
  sourceUrl    String?
  fileName     String?
  mimeType     String?
  fileSize     Int?

  // RAG backendi dokument (stabiilne id) – hoia unikaalsena
  remoteId     String?       @unique

  // Veahaldus ja toor-meta
  error        String?
  metadata     Json?
  insertedAt   DateTime?

  // --- Ajakirja/Artikli meta (toetab lühiviidet & filtreid) ---
  authors      String[]      @default([]) // PostgreSQL: text[]
  issueId      String?
  issueLabel   String?
  year         Int?
  articleId    String?
  section      String?
  pages        Int[]         @default([]) // PostgreSQL: integer[]
  pageRange    String?
  journalTitle String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminId])
  @@index([status])
  @@index([audience])
  @@index([type])
  @@index([createdAt])
  @@index([insertedAt])
  @@index([journalTitle])
  @@index([issueLabel])
  @@index([year])
  @@index([articleId])
}

model ConversationRun {
  /// Frontendi saadetud convId (nt randomUUID). Hoia stabiilsena sama vestluse jooksul.
  id       String    @id
  userId   String
  role     Role
  text     String    @default("") @db.Text
  sources  Json?
  status   RunStatus @default(RUNNING)
  isCrisis Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, updatedAt])
  @@index([status])
  @@index([userId, status, updatedAt])
  @@index([isCrisis, updatedAt])
}

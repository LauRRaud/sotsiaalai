import fs from "fs";
import path from "path";
import { fileURLToPath, pathToFileURL } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const ROOT_DIR = path.join(__dirname, "..");
const LOCALES = ["et", "ru", "en"];
const TYPES_DIR = path.join(ROOT_DIR, "types");
const TYPES_FILE = path.join(TYPES_DIR, "messages.d.ts");

function collectKeys(node, prefix = "", set) {
  if (node == null) return;
  if (typeof node === "string") {
    if (prefix) set.add(prefix);
    return;
  }
  if (Array.isArray(node)) return;
  if (typeof node === "object") {
    for (const [key, value] of Object.entries(node)) {
      const next = prefix ? `${prefix}.${key}` : key;
      collectKeys(value, next, set);
    }
  }
}

export function getMessageKeySets() {
  const keySets = {};
  for (const locale of LOCALES) {
    const file = path.join(ROOT_DIR, "messages", `${locale}.json`);
    const content = JSON.parse(fs.readFileSync(file, "utf8"));
    const set = new Set();
    collectKeys(content, "", set);
    keySets[locale] = set;
  }
  return keySets;
}

export function generateTypesFile(keys) {
  if (!fs.existsSync(TYPES_DIR)) {
    fs.mkdirSync(TYPES_DIR, { recursive: true });
  }
  const sorted = Array.from(keys).sort();
  const union = sorted.map((key) => `  | "${key}"`).join("\n") || '  | ""';
  const contents = `// Auto-generated by scripts/generate-message-types.mjs\n// Do not edit manually.\nexport type MessageKey =\n${union};\n`;
  fs.writeFileSync(TYPES_FILE, contents, "utf8");
  return TYPES_FILE;
}

export function generateMessageTypes() {
  const keySets = getMessageKeySets();
  const union = new Set();
  Object.values(keySets).forEach((set) => set.forEach((key) => union.add(key)));
  const file = generateTypesFile(union);
  return { keySets, union, file };
}

if (pathToFileURL(process.argv[1]).href === import.meta.url) {
  const result = generateMessageTypes();
  console.log(`Generated ${result.union.size} i18n message keys at ${path.relative(ROOT_DIR, result.file)}`);
}
